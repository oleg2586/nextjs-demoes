{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Rct\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst SelectedMeetupPage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: \"h1\",\n    title: props.meetupData.title,\n    image: props.meetupData.image,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollections = db.collection(\"meetups\"); // const response = await meetupsCollections.insertOne(data);\n\n  const meetupss = await meetupsCollections.find({}, {\n    _id: 1\n  }).toArray(); //find in every obj in array but only id\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupss.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) //   [  {\n    //         params:{\n    //             meetupId:'h1'\n    //         }\n    //     },\n    //     {\n    //         params:{\n    //             meetupId:'h3'\n    //         }\n    //     }\n    // ]\n\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // console.log('meetupId',meetupId);\n\n  const client = await MongoClient.connect(\"mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollections = db.collection(\"meetups\"); // const response = await meetupsCollections.insertOne(data);\n\n  const selectedMeetup = await meetupsCollections.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      } // {\n      //     id:meetupId,\n      //     title:\"First Meetup\",\n      //     image:'https://costar.brightspotcdn.com/dims4/default/e1b9846/2147483647/strip/true/crop/2100x1485+0+0/resize/2100x1485!/quality/100/?url=http%3A%2F%2Fcostar-brightspot.s3.amazonaws.com%2F10%2Ff0%2F261bc7174a77905a8ba8c5a2a4aa%2Fchicago.jpg',\n      //     address:'some city in some town',\n      //     description:'THes is a first meetup'\n      // }\n\n    }\n  };\n}\nexport default SelectedMeetupPage;","map":{"version":3,"sources":["D:/Rct/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","SelectedMeetupPage","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollections","collection","meetupss","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,sBACE,QAAC,YAAD;AACE,IAAA,EAAE,EAAC,IADL;AAEE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAH1B;AAIE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAJ5B;AAKE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AALhC;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,8FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CALqC,CAMrC;;AACA,QAAMC,QAAQ,GAAG,MAAMF,kBAAkB,CAACG,IAAnB,CAAwB,EAAxB,EAA4B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA5B,EAAwCC,OAAxC,EAAvB,CAPqC,CAOqC;;AAC1ER,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,QAAQ,CAACO,GAAT,CAAcC,MAAD,KAAa;AAC/BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADuB,KAAb,CAAb,CAFF,CAKL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAfK,GAAP;AAiBD;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAD4C,CAE5C;;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,8FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CAP4C,CAQ5C;;AACA,QAAMe,cAAc,GAAG,MAAMhB,kBAAkB,CAACiB,OAAnB,CAA2B;AACtDb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD;AADyC,GAA3B,CAA7B;AAGAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAACF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADO;AAEVrB,QAAAA,KAAK,EAACwB,cAAc,CAACxB,KAFX;AAGVE,QAAAA,OAAO,EAACsB,cAAc,CAACtB,OAHb;AAIVD,QAAAA,KAAK,EAACuB,cAAc,CAACvB,KAJX;AAKVE,QAAAA,WAAW,EAACqB,cAAc,CAACrB;AALjB,OADP,CASL;AACA;AACA;AACA;AACA;AACA;AACA;;AAfK;AADF,GAAP;AAmBD;AACD,eAAeN,kBAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nconst SelectedMeetupPage = (props) => {\r\n  return (\r\n    <MeetupDetail\r\n      id=\"h1\"\r\n      title={props.meetupData.title}\r\n      image={props.meetupData.image}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n};\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollections = db.collection(\"meetups\");\r\n  // const response = await meetupsCollections.insertOne(data);\r\n  const meetupss = await meetupsCollections.find({}, { _id: 1 }).toArray(); //find in every obj in array but only id\r\n  client.close();\r\n  return {\r\n    fallback: false,\r\n    paths: meetupss.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n    //   [  {\r\n    //         params:{\r\n    //             meetupId:'h1'\r\n    //         }\r\n    //     },\r\n    //     {\r\n    //         params:{\r\n    //             meetupId:'h3'\r\n    //         }\r\n    //     }\r\n    // ]\r\n  };\r\n}\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n  // console.log('meetupId',meetupId);\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollections = db.collection(\"meetups\");\r\n  // const response = await meetupsCollections.insertOne(data);\r\n  const selectedMeetup = await meetupsCollections.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id:selectedMeetup._id.toString(),\r\n        title:selectedMeetup.title,\r\n        address:selectedMeetup.address,\r\n        image:selectedMeetup.image,\r\n        description:selectedMeetup.description,\r\n      }\r\n\r\n      // {\r\n      //     id:meetupId,\r\n      //     title:\"First Meetup\",\r\n      //     image:'https://costar.brightspotcdn.com/dims4/default/e1b9846/2147483647/strip/true/crop/2100x1485+0+0/resize/2100x1485!/quality/100/?url=http%3A%2F%2Fcostar-brightspot.s3.amazonaws.com%2F10%2Ff0%2F261bc7174a77905a8ba8c5a2a4aa%2Fchicago.jpg',\r\n      //     address:'some city in some town',\r\n      //     description:'THes is a first meetup'\r\n      // }\r\n    },\r\n  };\r\n}\r\nexport default SelectedMeetupPage;\r\n"]},"metadata":{},"sourceType":"module"}