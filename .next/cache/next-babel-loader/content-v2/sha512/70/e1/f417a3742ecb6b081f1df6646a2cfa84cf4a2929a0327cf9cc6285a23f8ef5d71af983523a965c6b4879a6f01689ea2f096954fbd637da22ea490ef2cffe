{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Rct\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient } from 'mongodb';\n\nconst SelectedMeetupPage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: \"h1\",\n    title: props.meetupData.title,\n    image: props.meetupData.image,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollections = db.collection('meetups'); // const response = await meetupsCollections.insertOne(data);\n\n  const meetupss = await meetupsCollections.find({}, {\n    _id: 1\n  }).toArray(); //find in every obj in array but only id\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupss.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) //   [  {\n    //         params:{\n    //             meetupId:'h1'\n    //         }\n    //     },\n    //     {\n    //         params:{\n    //             meetupId:'h3'\n    //         }\n    //     }\n    // ]\n\n  };\n}\n;\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // console.log('meetupId',meetupId);\n\n  const client = await MongoClient.connect('mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollections = db.collection('meetups'); // const response = await meetupsCollections.insertOne(data);\n\n  const selectedMeetup = await meetupsCollections.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup // {\n      //     id:meetupId,\n      //     title:\"First Meetup\",\n      //     image:'https://costar.brightspotcdn.com/dims4/default/e1b9846/2147483647/strip/true/crop/2100x1485+0+0/resize/2100x1485!/quality/100/?url=http%3A%2F%2Fcostar-brightspot.s3.amazonaws.com%2F10%2Ff0%2F261bc7174a77905a8ba8c5a2a4aa%2Fchicago.jpg',\n      //     address:'some city in some town',\n      //     description:'THes is a first meetup'\n      // }\n\n    }\n  };\n}\n;\nexport default SelectedMeetupPage;","map":{"version":3,"sources":["D:/Rct/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","SelectedMeetupPage","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollections","collection","meetupss","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,kBAAkB,GAAGC,KAAD,IAAS;AAC/B,sBACI,QAAC,YAAD;AAAe,IAAA,EAAE,EAAC,IAAlB;AACA,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADxB;AAEA,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFxB;AAGA,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH1B;AAIA,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ9B;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAVD;;AAWC,OAAO,eAAeC,cAAf,GAA+B;AACnC,QAAMC,MAAM,GAAE,MAAMT,WAAW,CAACU,OAAZ,CAAoB,8FAApB,CAApB;AACA,QAAMC,EAAE,GAACF,MAAM,CAACE,EAAP,EAAT;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CAHmC,CAInC;;AACA,QAAMC,QAAQ,GAAG,MAAMF,kBAAkB,CAACG,IAAnB,CAAwB,EAAxB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAvB,CALmC,CAKkC;;AACrER,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAC,KADN;AAEHC,IAAAA,KAAK,EACDN,QAAQ,CAACO,GAAT,CAAaC,MAAM,KAAI;AAACC,MAAAA,MAAM,EAAC;AAACC,QAAAA,QAAQ,EAACF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAV;AAAR,KAAJ,CAAnB,CAHD,CAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAdG,GAAP;AAgBF;AAAA;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC1C,QAAMH,QAAQ,GAAEG,OAAO,CAACJ,MAAR,CAAeC,QAA/B,CAD0C,CAE1C;;AACA,QAAMf,MAAM,GAAE,MAAMT,WAAW,CAACU,OAAZ,CAAoB,8FAApB,CAApB;AACA,QAAMC,EAAE,GAACF,MAAM,CAACE,EAAP,EAAT;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CAL0C,CAM1C;;AACA,QAAMe,cAAc,GAAG,MAAMhB,kBAAkB,CAACiB,OAAnB,CAA2B;AAACb,IAAAA,GAAG,EAACQ;AAAL,GAA3B,CAA7B;AACAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHhB,IAAAA,KAAK,EAAC;AACFC,MAAAA,UAAU,EAACyB,cADT,CAGF;AACA;AACA;AACA;AACA;AACA;AACA;;AATE;AADH,GAAP;AAaH;AAAA;AACD,eAAe3B,kBAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst SelectedMeetupPage =(props)=>{\r\n    return (\r\n        <MeetupDetail  id='h1' \r\n        title={props.meetupData.title} \r\n        image={props.meetupData.image}\r\n        address={props.meetupData.address}\r\n        description={props.meetupData.description}\r\n         />\r\n       \r\n    );\r\n};\r\n export async function getStaticPaths(){\r\n    const client =await MongoClient.connect('mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db=client.db();\r\n    const meetupsCollections = db.collection('meetups');\r\n    // const response = await meetupsCollections.insertOne(data);\r\n    const meetupss = await meetupsCollections.find({},{_id:1}).toArray();//find in every obj in array but only id\r\n    client.close();\r\n    return {\r\n        fallback:false,\r\n        paths:\r\n            meetupss.map(meetup =>({params:{meetupId:meetup._id.toString()}}))\r\n        //   [  {\r\n        //         params:{\r\n        //             meetupId:'h1'\r\n        //         }\r\n        //     },\r\n        //     {\r\n        //         params:{\r\n        //             meetupId:'h3'\r\n        //         }\r\n        //     }\r\n        // ]\r\n    }\r\n }; \r\n export async function getStaticProps(context){\r\n    const meetupId= context.params.meetupId;\r\n    // console.log('meetupId',meetupId);\r\n    const client =await MongoClient.connect('mongodb+srv://olegi4:457465@cluster0.0r1jbpg.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db=client.db();\r\n    const meetupsCollections = db.collection('meetups');\r\n    // const response = await meetupsCollections.insertOne(data);\r\n    const selectedMeetup = await meetupsCollections.findOne({_id:meetupId});\r\n    client.close();\r\n    return {\r\n        props:{\r\n            meetupData:selectedMeetup\r\n            \r\n            // {\r\n            //     id:meetupId,\r\n            //     title:\"First Meetup\",\r\n            //     image:'https://costar.brightspotcdn.com/dims4/default/e1b9846/2147483647/strip/true/crop/2100x1485+0+0/resize/2100x1485!/quality/100/?url=http%3A%2F%2Fcostar-brightspot.s3.amazonaws.com%2F10%2Ff0%2F261bc7174a77905a8ba8c5a2a4aa%2Fchicago.jpg',\r\n            //     address:'some city in some town',\r\n            //     description:'THes is a first meetup'\r\n            // }\r\n        }\r\n }\r\n};\r\nexport default SelectedMeetupPage;"]},"metadata":{},"sourceType":"module"}